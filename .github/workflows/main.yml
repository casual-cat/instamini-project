name: DevOps Final Project

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]
  workflow_dispatch:

jobs:
  build-test-deploy:
    runs-on: ubuntu-latest
    env:
      GOOGLE_APPLICATION_CREDENTIALS: ${{ github.workspace }}/gcp-key.json
      TF_VAR_vault_gcp_sa_key_b64: ${{ secrets.VAULT_GCP_SA_KEY_B64 }}
      TF_VAR_db_root_password: ${{ secrets.DB_ROOT_PASSWORD }}

    steps:
      ############################################################
      # 1) Check out code
      ############################################################
      - name: Check out repository
        uses: actions/checkout@v3

      ############################################################
      # 2) Debug listing
      ############################################################
      - name: List repository
        run: |
          echo "Root directory:"
          ls -la
          echo "Terraform folder:"
          ls -la terraform || true

      ############################################################
      # 3) Install Dependencies
      ############################################################
      - name: Install Dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y apt-transport-https ca-certificates gnupg curl jq unzip python3-pip
          # Terraform
          TF_VERSION="1.4.6"
          curl -sSL "https://releases.hashicorp.com/terraform/${TF_VERSION}/terraform_${TF_VERSION}_linux_amd64.zip" -o terraform.zip
          rm -rf tfbin
          unzip -o terraform.zip -d tfbin
          sudo mv tfbin/terraform /usr/local/bin/terraform
          sudo chmod +x /usr/local/bin/terraform
          rm -rf tfbin terraform.zip
          terraform -version

          # Google Cloud CLI
          echo "deb [signed-by=/usr/share/keyrings/cloud.google.gpg] https://packages.cloud.google.com/apt cloud-sdk main" | sudo tee /etc/apt/sources.list.d/cloud-sdk.list
          curl https://packages.cloud.google.com/apt/doc/apt-key.gpg | sudo apt-key --keyring /usr/share/keyrings/cloud.google.gpg add -
          sudo apt-get update && sudo apt-get install -y google-cloud-cli

          # kubectl
          sudo apt-get install -y kubectl

          # gke-gcloud-auth-plugin
          sudo apt-get install -y google-cloud-sdk-gke-gcloud-auth-plugin

          # helm
          HELM_VERSION="v3.12.0"
          curl -sSL "https://get.helm.sh/helm-${HELM_VERSION}-linux-amd64.tar.gz" -o helm.tar.gz
          tar xvf helm.tar.gz
          sudo mv linux-amd64/helm /usr/local/bin/helm

          # Vault CLI
          VAULT_VERSION="1.14.2"
          curl -fsSL "https://releases.hashicorp.com/vault/${VAULT_VERSION}/vault_${VAULT_VERSION}_linux_amd64.zip" -o vault.zip
          unzip vault.zip
          sudo mv vault /usr/local/bin/
          vault version

          # Python deps
          pip3 install --upgrade pip
          pip3 install -r requirements.txt || true

      ############################################################
      # 4) GCP Auth
      ############################################################
      - name: GCP Auth
        run: |
          echo '${{ secrets.GCP_SA_KEY }}' | base64 --decode > $GITHUB_WORKSPACE/gcp-key.json
          gcloud auth activate-service-account --key-file=$GITHUB_WORKSPACE/gcp-key.json
          gcloud config set project ${{ secrets.GCP_PROJECT_ID }}

      ############################################################
      # 5) Terraform Import optional KMS resources
      ############################################################
      - name: Terraform Import optional KMS resources
        run: |
          cd terraform
          terraform init \
            -backend-config="bucket=tfstate-bucket-instamini" \
            -backend-config="prefix=terraform/state"

          terraform import \
            google_kms_key_ring.vault_ring \
            "projects/${{ secrets.GCP_PROJECT_ID }}/locations/${{ secrets.GCP_REGION }}/keyRings/${{ secrets.KMS_KEY_RING }}" \
            || echo "Key Ring not found, continuing..."

          terraform import \
            google_kms_crypto_key.vault_key \
            "projects/${{ secrets.GCP_PROJECT_ID }}/locations/${{ secrets.GCP_REGION }}/keyRings/${{ secrets.KMS_KEY_RING }}/cryptoKeys/${{ secrets.KMS_CRYPTO_KEY }}" \
            || echo "Crypto Key not found, continuing..."

          terraform import \
            google_secret_manager_secret.root_token_secret \
            "projects/${{ secrets.GCP_PROJECT_ID }}/secrets/vault-${{ secrets.KMS_CRYPTO_KEY }}-token" \
            || echo "Root token secret not found, continuing..."

      ############################################################
      # 6) Test Python App (Optional)
      ############################################################
      - name: Test Python App
        env:
          MYSQL_HOST: ${{ secrets.MYSQL_HOST }}
          MYSQL_PORT: ${{ secrets.MYSQL_PORT }}
          MYSQL_USER: ${{ secrets.MYSQL_USER }}
          MYSQL_PASS: ${{ secrets.MYSQL_PASS }}
          MYSQL_DB:   ${{ secrets.MYSQL_DB }}
        run: |
          python3 -m unittest discover -s tests

      ############################################################
      # 7A) Check if GKE cluster exists
      ############################################################
      - name: Check if cluster exists
        id: clustercheck
        run: |
          EXISTING=$(gcloud container clusters list --filter="name=vault-ha-cluster" --format="value(name)" || true)
          if [ "$EXISTING" == "vault-ha-cluster" ]; then
            echo "cluster_exists=true" >> $GITHUB_OUTPUT
          else
            echo "cluster_exists=false" >> $GITHUB_OUTPUT
          fi

      ############################################################
      # 7B) Conditionally create cluster+nodepool
      ############################################################
      - name: Terraform Apply (Create Cluster)
        if: steps.clustercheck.outputs.cluster_exists == 'false'
        env:
          TF_VAR_gcp_project: ${{ secrets.GCP_PROJECT_ID }}
          TF_VAR_gcp_region:  ${{ secrets.GCP_REGION }}
          TF_VAR_gcp_zone:    ${{ secrets.GCP_ZONE }}
          TF_VAR_vault_gcp_sa_key_b64: ${{ secrets.VAULT_GCP_SA_KEY_B64 }}
          TF_VAR_kms_key_ring: ${{ secrets.KMS_KEY_RING }}
          TF_VAR_kms_crypto_key: ${{ secrets.KMS_CRYPTO_KEY }}
          TF_VAR_cloud_sql_instance_name: ${{ secrets.CLOUD_SQL_INSTANCE_NAME }}
          TF_VAR_db_root_password: ${{ secrets.DB_ROOT_PASSWORD }}
        run: |
          cd terraform
          terraform apply \
            -target=google_container_cluster.primary \
            -target=google_container_node_pool.primary_nodes \
            -auto-approve

      ############################################################
      # 7C) Configure Kubeconfig
      ############################################################
      - name: Configure Kubeconfig
        run: |
          gcloud container clusters get-credentials vault-ha-cluster \
            --zone ${{ secrets.GCP_ZONE }} \
            --project ${{ secrets.GCP_PROJECT_ID }}

      ############################################################
      # 7D) Terraform Apply (KMS + Vault + local-exec init)
      ############################################################
      - name: Terraform Apply (KMS + Vault)
        env:
          TF_VAR_gcp_project: ${{ secrets.GCP_PROJECT_ID }}
          TF_VAR_gcp_region: ${{ secrets.GCP_REGION }}
          TF_VAR_gcp_zone: ${{ secrets.GCP_ZONE }}
          TF_VAR_vault_gcp_sa_key_b64: ${{ secrets.VAULT_GCP_SA_KEY_B64 }}
          TF_VAR_kms_key_ring: ${{ secrets.KMS_KEY_RING }}
          TF_VAR_kms_crypto_key: ${{ secrets.KMS_CRYPTO_KEY }}
          TF_VAR_cloud_sql_instance_name: ${{ secrets.CLOUD_SQL_INSTANCE_NAME }}
          TF_VAR_db_root_password: ${{ secrets.DB_ROOT_PASSWORD }}
        run: |
          cd terraform
          terraform apply -auto-approve

      ############################################################
      # 8) Create MySQL Secret (for your app)
      ############################################################
      - name: Create MySQL Secret
        run: |
          gcloud container clusters get-credentials vault-ha-cluster --zone ${{ secrets.GCP_ZONE }} --project ${{ secrets.GCP_PROJECT_ID }}
          kubectl delete secret mysite-db-secrets -n default --ignore-not-found=true
          kubectl create secret generic mysite-db-secrets -n default \
            --from-literal=MYSQL_HOST=${{ secrets.MYSQL_HOST }} \
            --from-literal=MYSQL_PORT=${{ secrets.MYSQL_PORT }} \
            --from-literal=MYSQL_USER=${{ secrets.MYSQL_USER }} \
            --from-literal=MYSQL_PASS=${{ secrets.MYSQL_PASS }} \
            --from-literal=MYSQL_DB=${{ secrets.MYSQL_DB }}

      ############################################################
      # 9) Login to Docker Hub & Build/Push your image
      ############################################################
      - name: Login to DockerHub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_PASSWORD }}

      - name: Docker Build & Push
        uses: docker/build-push-action@v2
        with:
          context: .
          file: ./Dockerfile
          push: true
          tags: ${{ secrets.DOCKERHUB_USERNAME }}/instamini:v3
          platforms: linux/amd64

      ############################################################
      # 10) Re-Configure kubectl
      ############################################################
      - name: Configure kubectl (again)
        run: |
          gcloud container clusters get-credentials vault-ha-cluster \
            --zone ${{ secrets.GCP_ZONE }} \
            --project ${{ secrets.GCP_PROJECT_ID }}

      ############################################################
      # 11) Install Argo CD & Create App (LoadBalancer approach)
      ############################################################
      - name: Install Argo CD & Create App
        run: |
          set -euo pipefail

          # 1) Create argocd namespace & install Argo CD
          kubectl create namespace argocd --dry-run=client -o yaml | kubectl apply -f -
          kubectl apply -n argocd -f https://raw.githubusercontent.com/argoproj/argo-cd/stable/manifests/install.yaml

          # 2) Wait for the argocd-server Deployment to be rolled out
          kubectl rollout status deployment argocd-server -n argocd --timeout=300s

          # 3) Download Argo CD CLI
          curl -sSL -o argocd https://github.com/argoproj/argo-cd/releases/latest/download/argocd-linux-amd64
          chmod +x argocd
          sudo mv argocd /usr/local/bin/argocd

          # 4) Patch argocd-server service to be a LoadBalancer
          kubectl patch svc argocd-server -n argocd \
            -p '{"spec": {"type": "LoadBalancer"}}'

          echo "Waiting up to 5 minutes for the argocd-server external IP..."
          for i in {1..30}; do
            EXTERNAL_IP=$(kubectl get svc argocd-server -n argocd -o jsonpath='{.status.loadBalancer.ingress[0].ip}' || true)
            if [ -n "$EXTERNAL_IP" ]; then
              echo "Argo CD LB IP: $EXTERNAL_IP"
              break
            fi
            sleep 10
          done

          if [ -z "$EXTERNAL_IP" ]; then
            echo "ERROR: Argo CD LB IP never appeared."
            exit 1
          fi

          sleep 30

          # 5) Get the initial admin password
          ARGOCD_PW=$(kubectl -n argocd get secret argocd-initial-admin-secret \
            -o jsonpath="{.data.password}" | base64 -d)

          # 6) Argo CD CLI login via the new LoadBalancer IP
          argocd login "$EXTERNAL_IP:443" \
            --username admin \
            --password "$ARGOCD_PW" \
            --insecure \
            --grpc-web

          # If your GitHub repo is PRIVATE, add credentials (optional):
          # argocd repo add https://github.com/casual-cat/instamini-project.git \
          #   --username $GITHUB_USER \
          #   --password $GITHUB_TOKEN \
          #   --insecure

          # 7) Create the Argo CD app
          argocd app create instamini \
            --repo https://github.com/casual-cat/instamini-project.git \
            --path helm/instamini \
            --dest-server https://kubernetes.default.svc \
            --dest-namespace default \
            --sync-policy automated \
            --helm-set image.repository=${{ secrets.DOCKERHUB_USERNAME }}/instamini \
            --helm-set image.tag=v3 \
            --upsert \
            --insecure \
            --grpc-web

          # 8) Wait/Sync the app
          argocd app wait instamini --operation --timeout=300 --insecure --grpc-web
          argocd app sync instamini --insecure --grpc-web
          argocd app wait instamini --sync --health --timeout=300 --insecure --grpc-web

      ############################################################
      # 12) Print External IP
      ############################################################
      - name: Print External IP
        run: |
          for i in {1..10}; do
            EXTERNAL_IP=$(kubectl get svc instamini-mysite -n default -o jsonpath='{.status.loadBalancer.ingress[0].ip}')
            if [ -n "$EXTERNAL_IP" ]; then
              echo "App is accessible at: http://$EXTERNAL_IP"
              exit 0
            fi
            echo "No external IP yet, waiting 30s..."
            sleep 30
          done
          echo "No external IP assigned after 10 tries."
          exit 1
